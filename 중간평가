{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyP6kjiIktlU4y6mZIRr/v+L",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/laura024/bigdata/blob/main/%EC%A4%91%EA%B0%84%ED%8F%89%EA%B0%80\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 77
        },
        "id": "twxCnfZN6QSl",
        "outputId": "76743792-dd52-458d-e691-87cacd01fa73"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-0450b8a3-f76f-4953-a961-e6e49151ce22\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-0450b8a3-f76f-4953-a961-e6e49151ce22\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving age.csv to age (1).csv\n"
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        "uploaded=files.upload()\n",
        "#업로드하기 전 한글깨짐 문제 해결을 위해 다른이름으로 저장-> CSV UTF-8(쉼표로 분리)로 변경하여 저장하기"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#글자깨짐 문제 수정을 위해 다음의 코드 실행 \n",
        "#단계 1: 폰트 설치\n",
        "import matplotlib.font_manager as fm\n",
        "\n",
        "!apt-get -qq -y install fonts-nanum > /dev/null\n",
        "fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'\n",
        "font = fm.FontProperties(fname=fontpath, size=9)\n",
        "fm._rebuild()"
      ],
      "metadata": {
        "id": "lw4_Y4m760m_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 단계 2: 런타임 재시작\n",
        "import os\n",
        "os.kill(os.getpid(), 9)"
      ],
      "metadata": {
        "id": "v42Ba9gS64G2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 단계 3: 한글 폰트 설정\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib as mpl\n",
        "import matplotlib.font_manager as fm\n",
        "\n",
        "# 마이너스 표시 문제\n",
        "mpl.rcParams['axes.unicode_minus'] = False\n",
        "\t\n",
        "# 한글 폰트 설정\n",
        "path = '/usr/share/fonts/truetype/nanum/NanumGothicBold.ttf'\n",
        "font_name = fm.FontProperties(fname=path, size=18).get_name()\n",
        "plt.rc('font', family=font_name)\n",
        "fm._rebuild()"
      ],
      "metadata": {
        "id": "ISSa6pkz69cM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import csv\n",
        "f=open('age.csv')\n",
        "data=csv.reader(f)\n",
        "result=[]\n",
        "name=input('인구구조가 알고 싶은 지역의 이름')\n",
        "\n",
        "for row in data:\n",
        "  if name in row[0]:\n",
        "    for i in row[3:]:\n",
        "      result.append(int(i.replace(',','')))\n",
        "\n",
        "\n",
        "plt.style.use('ggplot')\n",
        "plt.title(name+'지역의 인구구조')\n",
        "plt.plot(result)   # 라인그래프\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "id": "vkBHnT2A7ATZ",
        "outputId": "7ac9ff97-98ee-4973-ba56-8143dee11d2c"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "인구구조가 알고 싶은 지역의 이름등촌제3동\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded=files.upload()\n",
        "#업로드하기 전 한글깨짐 문제 해결을 위해 다른이름으로 저장-> CSV UTF-8(쉼표로 분리)로 변경하여 저장하기"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 77
        },
        "id": "_CxuPzda8SUi",
        "outputId": "d0a8a1ab-9384-4411-e55f-b1aa14c03759"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-0293ec63-10d3-42ce-b64d-a684e412a3d7\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-0293ec63-10d3-42ce-b64d-a684e412a3d7\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving gender.csv to gender.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#글자깨짐 문제 수정을 위해 다음의 코드 실행 \n",
        "#단계 1: 폰트 설치\n",
        "import matplotlib.font_manager as fm\n",
        "\n",
        "!apt-get -qq -y install fonts-nanum > /dev/null\n",
        "fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'\n",
        "font = fm.FontProperties(fname=fontpath, size=9)\n",
        "fm._rebuild()"
      ],
      "metadata": {
        "id": "4UFst13x9i0O"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 단계 2: 런타임 재시작\n",
        "import os\n",
        "os.kill(os.getpid(), 9)"
      ],
      "metadata": {
        "id": "WStoAXhl9kuc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 단계 3: 한글 폰트 설정\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib as mpl\n",
        "import matplotlib.font_manager as fm\n",
        "\n",
        "# 마이너스 표시 문제\n",
        "mpl.rcParams['axes.unicode_minus'] = False\n",
        "\t\n",
        "# 한글 폰트 설정\n",
        "path = '/usr/share/fonts/truetype/nanum/NanumGothicBold.ttf'\n",
        "font_name = fm.FontProperties(fname=path, size=18).get_name()\n",
        "plt.rc('font', family=font_name)\n",
        "fm._rebuild()"
      ],
      "metadata": {
        "id": "jseo_e4g9mvw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import csv\n",
        "f=open('gender.csv')\n",
        "data=csv.reader(f)\n",
        "m=[] #남성인구수의 (-)\n",
        "f=[] #여성인구수\n",
        "m2=[] #남성인구수\n",
        "name=input('인구구조가 알고 싶은 지역의 이름: ')\n",
        "\n",
        "for row in data:\n",
        "  if name in row[0]:\n",
        "    for i in row[3:104]:\n",
        "      m.append(-int(i.replace(',','')))\n",
        "      m2.append(int(i.replace(',','')))\n",
        "    for i in row[106:]:\n",
        "      f.append(int(i.replace(',','')))\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "plt.title('강서구 등촌제3동 지역의 남녀 인구 성별 분포')\n",
        "plt.barh(range(101),m, label='남성')\n",
        "plt.barh(range(101),f, label='여성')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "_OgHVb609o6B",
        "outputId": "f5325780-647b-43db-f036-a8dcfa669e50"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "인구구조가 알고 싶은 지역의 이름: 등촌제3동\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(m2,f, c=range(101), alpha=0.5, cmap='jet') #컬러맵 적용\n",
        "plt.colorbar()\n",
        "plt.plot(range(max(m2)), range(max(m2)), 'g') #추세선 추가\n",
        "\n",
        "plt.xlabel('남성인구수')\n",
        "plt.ylabel('여성인구수')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "elIb80DO9rN1",
        "outputId": "d64199aa-758a-4c5f-e318-1a07a0d91a47"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXUAAAEJCAYAAABrHbdyAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdd5xU1fn48c9zp8/2Qttll6UrUgRRFNTYo4bEGqNYYgu2aNRooj9NTDSaavwmX6MG81VjTbEgdrGA2BsIgoiUpS7be5l2n98fd4Bd2IXZZTvnnde8snPm3nPPyO4zZ557iqgqhmEYRv9g9XQDDMMwjM5jgrphGEY/YoK6YRhGP2KCumEYRj9igrphGEY/YoK6YRhGP2KCumEYRjcTEZeI3CkirzYrO05EXhKR/4jIn/dU3hYT1A3DMLrfTGAe4AYQEQFuBk5X1bOABhE5vq3y3VVsgrphGEY3U9XnVfWjZkVjgBWqGoo/nwscvZvyNpmgbhiG0fOygIpmzyviZW2Vt8nd6U3rJtnZ2VpQUNDTzTAMow/47LPPylR1wN7UMSEzU+sikYSOLayrWw40NSuao6pzdnNKOZDR7HlmvKyt8jb12aBeUFDAp59+2tPNMAyjDxCR9XtbR30kwh0HHZTQsecvXNikqlPbUf1qYLyI+OKpllOAhbspb1OfDeqGYRjdKRYO01BY2NnVRgBUNSYidwBPiEgdUAq8rqraWvnuKjRB3TAMIwEer5fsRFO+6xP7YqCqJzX7+W3g7VaOabW8LSaoG4ZhJMjV0w1IgAnqhmH0KooiSE83YxdC3wiYfaGNhmH0c4rSyGfU8joxyvGSTzLfwc+onm7adkLf6KmbceqGYfS4Bj6iiicAGze5RKmgggcIU9jTTWvBneCjJ/X09Q3D2McpNnW8hosBWAQAcJGOEqWWt8ji4h5uoUPDYUKdP/ql05mgbhhGj1KaiFGLh9wW5RYpRNncQ63alcvrJaOTR790hS4N6iJyH+ABkoBVqvorEXkDZ0D9NjepapWITALuAuqABmC2qiY2fcswjD5L8OMiDZsGLILby21q8DGmB1vWUl/JqXdpUFfVK7f9LCL/FJGx8fLLWzn8LuB8Va0QkUuBC4EHu7J9hmH0PMEihZOp4nGUdCySiFENREnm2J5u3nZ9ZfRLt9woFZEMYABQDNSJyB0i8piI/Cj+uh+Iquq2hWv2uBKZYRj9R4ApZHARLpLjo1+GksVVeMnr6aa14Erw0ZO6Ov0yCvg1MB24TlWrgFPjrwlwv4isAVYCVc1OrcBZuGbn+mYDswHy8/O7sumGYXQjQQgwkQATe7opbeorPfWuTr+sBs4VETfwlIh8qKpb46+piLwATATeY9eVyCpaqW8OMAdg6tSp2pVtNwyjd1GihFhOmKUIfvwchJvh3TdRKRwmZka/OFQ1KiIuwLvTS0cC81Q1JCIeEclQ1UoSWInMMIx9hxKjhscIsxghiBKjiUUkcTpBjuqWNlheLyn78ugXEZkCXI8zmiUVeEZVN4jI3UAy4Ac+UtX34qf8HHhQRGqAKHB1V7XNMIy+JcJqQizBTd72nrkSoZ55+JmCRWqXt2GfH/2iqp8D57VS/tM2jl8KnNlV7TEMo+8KswrB3SLVInhwkjKb8DKuW9qxTwd1wzCMzmKRDNitvKII/m5pg7lRahiGERdlDWE+RKnHw2Q8HBjvaSfGx0TqeRGbeiySUBSbclwMwM2wLmx5M+EwYm6UGoaxrwuxkEb+BXgR3ET4DDcTSOJyJMEQ5CKLVC6llieIsgVn4a8cUrkI6aakiOXzEhhVkNjB/fFGqWEYhk0dTTyNxWAkPvhNySLKMqIsx8OkhOvysT9ebiNKEYIbF0O6dd11Adx9YF1bE9QNw+gyNptx8t47RjM7gThAhK/aFdSdcz146JmJhyLg6gN3Sk1QNwwjYUqMWr6ghk9RbFKYSCpTsXaZgrKNH8XeZTcjIdItwxA7kwi4TVA3DKO/UJRS5lHNp7hJRxDKeJkGVjGE81vNbbvIw0UeNluBQQiCUg9YeDio29/D3jI9dcMwOi5WDuGPwa4A91jwTgJJfMRIZwtTQg2f4yMXia8FaJFEA2tppJAgI3c5R7BI4jIa+D9iFKKAkESA2bgY1M3vYC9FwrClsKdbsUcmqBtGbxT5Bmr/BEQADzS9Bu5xkHotSPeMy95ZmBIEa3tAh235cSHEllaDOoBFJkncgE0JEMJiSLuGM/YaPi+MKEjs2E/N6BfDMLZRG+r/DyQA1pB4mUJ0BYTeB/8xPdIsN8nAruvoCYqbtN2eK0jf65nvrI+sE9AHBugYxj7GLoNYCVjpO8pEwMp00jE9xE8+XgYRpnj7zc8I5bhIJcjoHmtXt7ISfPQgE9QNo7cRL6BO77w5jYAEWz2lOwguhnA+QUYToZgwW/ExmBx+iCu+YXS/tq2n3st3yTDpF8Pobax08E6E8HJw5Tq9dI2C1oLvqG5titIAuBB8ALhJZQiziNGIEounZPYhfSD9YoK6YfRGSReBfS9EV7P9C3XgTPBM6JbL2xQR5ilirAQsXByKjzOReBDvqZ55zI5RUl/CkJQh3X/xaBhKCrv/uu1kgrph9EZWOqTeArENYNeCe2jLHHsXUupo4m6UEEIeYBPlA5RS/NzQrVPzm9tUs4nznzufkvoSPp/9OT63r3sb4PVCfkGCB5vRL4Zh7EwE3N20AmEzURaj1GBtn47vwmIoMVZjsx4XBd3epme/epZL511KOBbm3pPvxetqawZrFzPpF8Mw+hqljJ1Dg8T/py32h+969eF6rn/teuZ8PoepOVN58vQnGZ3VQyNt+siQRhPUDcNoQRiGEmlRpthADIvB3daOxUWLOeeZc1hVvoqfz/g5tx99e8/10MEEdcMw+iY344kynBjrsMgGYtiU4eaobgnqttr85cO/cNObN5EdzGb++fM5dsSxXX7dPYqGoaywp1uxRyaoG4bRguDFz0+I8DZRPkQI4uO7uJne5dfeWreVC+deyGtrXuOUsafwj+/9g+xgdpdfNyEeLwwtSPDgfnqjVETuAzxAErBKVX8lIscB1wH1wCZVvT5+bKvlhmF0PyEJLzPxMrPbrvnSqpe46PmLqA3Xcv937ueygy5DpGdG2rTKpF9AVa/c9rOI/FNExgI3AyerakhEfiMixwNvtFauqvO7sn2GYfS8pmgTP5v/M/734/9l4qCJLDhjAeMGjOvpZrWuD8zB75b0i4hkAAOAdGCFqobiL80FTgc2tFFugrph9GPLS5ZzzjPnsKxkGddOu5bfHvdb/O6eWYVyjzqxpy4i1wEHAeF4rVcA0+mEbEWXfu6IyCgReQL4HJiD0/iKZodUAFnxR2vlO9c3W0Q+FZFPS0tLu67hhmF0KVXlvk/uY+qDUymuL+blWS9zz4n39N6Avk0nrP0iIunAcap6nqpeDKwAjsfJVpyuqmcBDfEsRrt1dfplNXCuiLiBp4B7gYxmh2QC5fFHa+U71zcH58OBqVOn7roGqGEYrSpqgrX1EHDBuBTw92BuuKyhjEvmXcK8r+dx4qgTeeSURxiU3AeW5Y2FoaqwM2qqBopEZAhQBQwDFtBJ2YpuSb+oalREXEAhMF5EfPHGnwIsBFa3UW4Yxl5QhWe2wIvFgDgZhGQX/HQUFPTAgo9vrH2DC567gPLGcu759j1cM+0aLOkDiWpwRr8MKUjw4PXZIvJps4I58U4pqqoi8jBwJU7n9T3azmK0W5cFdRGZAlwP1AGpwDOqul5E7gCeEJE6oBR4Pf4mdynvqrYZxr5iZR3MK4ZhAXAJgNJol/Hwpgi/GD0Qt3TPqOZwLMytb93KH9//I/tn788r577CpMGTuuXanUZoT8K6TFWntlqNyERgpqreHH9+OjCBBLIVieiyf1FV/Rw4r5Xyt4G3Ey03jP4oSpgoYXwEW2wP19k+qoSA5QR0n6uMYen/JujZTF1UWBVNZoTnB/gZ0WXXB1hVvopZz8zis6LPuPygy7n723cT9PTcuvB7pXPSVkOgxapojUABnZStMJOPDKMbxYiwmk/ZzNcoip8kxnIY2eR1yfVstkWPGCMyH8UjtTRGh1AXEVTrKOERcrgeN52/AqSq8vCSh7n6lavxu/0894PnOHW/Uzv9Ot2m80a/vA4cKSKPAiEgCFwDTKQTshUmqBtGN1rFx2zmK5LJxMJFmEa+4A0O5nukdiyFuluHpMOCMgh4NuJzldEYzaEp5twoTfckE6WGBpaTyoxOvW5lYyWXvXgZ/13xX44uOJrHTnuM3NTcTr1Gj+iEoK6qCtzSykudkq0wQd0wukmYJrawimSysOIpFy8BIoTZzFekcninX/OAFPj2QFhc10huVKiNgMeCw9LBEgALm/pOveai9Ys499lzKaor4nfH/o4bpt+Ay+oDUzH3xA5DTWFPt2KPTFA3jG4SoQlge0Dfxo2HBmq65JoiMCsXZjTmsFXARZSBPjdeCxRFieJjeKdcK2pHuX3h7dy56E5GZIzg/Yvf5+Dcgzul7l7B7YWBBQke3E/XfjEMYwc/ybjxECWMmx1LyIZoJI/OmRavdglE3wV7M1hjwDMdkRQKgmlkcAKVvILgJ4pFjHqCTOyUG6XrKtdx7rPn8sGmD7jwwAv564l/JcWX0gnvqBcxa78YhtGcCzejOYQVLMKDDzcemmjATxJD2PuNHzS2Fpp+72xSTRD4DCLz0cAtiJVBKkfiI486FqOECDKeIOOQvYxUTy57kstfvBxLLJ464ynOHn/2Xr+XXqsPDKk3Qd0wulEOY/CTzEaW00Q9wxhJHuPwsXdD/FQVQo+DesHatilzFtgbIPIq+M5BEPyM6LQhjDWhGn788o95bOljzMibweOnP05BekGn1N0rmZ66YRitySSHTHI6rT7FppHVuO0lWDKqZdyRARD9DHzndNr1AD7a9BGznp1FYVUhv/rWr7jlyFtwW/08nNhhaCjs6VbsUT//VzCM7qEoNaynmMVEqCWNEQzkQLwkd+l1I9SwiX/TxBYGsZEY5QTIJ4kRgICGwMrsUN1hqinT92jUpbhlEFlyHAE7h9+9+ztuW3AbQ1OH8s6F7zAjv3OHQ/Zabi9kFSR4sLlRahh9WhnLKOR13ARw4WUrH1PJSvZjFp4OplZUYUUNvFcKEYVpmTA5A1zN8rpFvEQTZfgll4hnMoHIMhrYgFtS8Wk6UAaeWe2+dkir2By7maTY56TiQomxrO4JbphXyfsbPufs8Wdz/3fuJ93f+ZOWejWTUzeM/i9GhE0sxE8mrvioFjcBGiihnOUMpmPD+p7bBHM3Q5LbiSUflsOMbJg90hljHqWOetbiYyAADd7JWBrCG11BRJfjYxR4zwJ3+69fpU+THPsYZQi2uHnxq83c8OoCIrbwyKkPc8HEH/auXYm6g8mpG8a+IUQ1NrHtAX0bN0FqWN+hoF7aBC9sgfwguOO9w2yFD8rg6IEwNhWUWMuTxEOd/whseww+9ZJsXYFIx9I/dvRNLJKpj8Btby7h8SXrmTQ4jQdOyWPyoBP2vYC+jQnqhtH/eQjgZNXtFotz2YTwtVh4L3HrG5yOobvZ130RZ2Gub2qdoO4mFR8DiVKDhzSItyJkxcjkGGQv8vluYPHWOq6a9zlrKuq4+rDR3HD4aHyu0r4Q17qG6akbxr7BQxJZjKOMZfgZgIWLCPUoNgOY2KE6gy5obRcYG0jxOD8LQg4zWc8TNLEVsFBiJDOSNCZ09O1gq80/PlZue3sx2Uk+/jtrOjOGZWFrOV4ZhYvBHa67T7PDECrs6VbskQnqhtEJ8jgGCw+lLAVsvKQxitMIMqBD9Y1JgWwfFDfBQJ/TS68Kg9+CA5vdm/QzhJFcQS1fE6WGAEMJUoDVwT/totoifjj3h8xfO5+ZY4bzp5MySAvYiBaTxACS3bcgfWVTi87m8kJaQYIHm9EvhtGnufCQzzHkMoMYYTwk7dU66W4Lrh8LD6yGDfFUTIYPfjoa0rw7HUsSGUzZuzcAvLjqRS56/iLqw/X8febfuXTyedj2R8T0CywZgtt1FCJ9YNu5rmLSL4ax73Hhw4WPCGHK2EKIBlLIJJOB7Q7yQwLwq/HO/qIxhRx/y+GMnaUx0sjP5v+Mez+5l0mDJvHUGU+x/4D9AbCso3FzdOdftK/qA19STFA3jE5WRzWfMp8mGokRJUQTGQxiOifhI9CuukQgp32ntMuXJV9yzjPn8GXJl1x36HX89tjf4nP7uu6CfZnpqRvGvmkFHxIlgg2UUoKNUkYJZZRzLKeS2cE8e2dSVe775D5++vpPSfOn8cq5r3DiqBN7ulm9m4YhWtjTrdijLg3qInI/zg37TOAlVX1cRN4AVjc77CZVrRKRScBdOBtVNwCzVTXSle0zjM4WopFKSvAQoJgNePFiYRHDTRM1fMwijuN7uHuwP1VaX8rF8y7mxVUvctKok3j4lIcZlLwP58oT5fJCSkGCB/fTG6WqegWAODMV3gEej5df3srhdwHnq2qFiFwKXAg82JXtM4zOJggK1FEL7NgQQ3E2wwgTppIyBvTQsMD5a+ZzwdwLqGis4C8n/oWrD7l6351I1BF9IP3SXWl/H1AR/7lORO4QkcdE5EcAIuIHoqq67Zi5YO7OGH2PFz8DyCVE/fbt4hUlRoQUsgGwsbu9XeFYmBtfv5ETHj+BzEAmH1/6MddMu8YE9PYQnIiZyKMHddd3wN8AfwBQ1VNhe+/9fhFZA6wEqpodX4GTsjGMPmcch1BJKVWUx2eZCslk4iOZMCEy48G9u3xd9jWznp3F50Wfc8XUK/jTCX8i6Nm79dv3WX2gp97lQV1ErgMWq+p7zctVVUXkBWAi8B60mE+dyY6effO6ZgOzAfLz87uszYbREYpSTxkxmjick0hlMIV8jQsfbrw00cRBHIpnpzViuqw9qjy0+CGuefUa/G4/c38wl1P2O6Vbrt0vmdEvICJXAvWq+kQbhxwJzFPVkIh4RCRDVSuBU4CFOx+sqnOAOQBTp05tbRa1YfSIEHV8zSvUUwxYCJDHYYzhTMopwcLFIHIIktQt7alsrGT2i7N5esXTHDP8GB499VFyU3O75dr9Vxi0sKcbsUddFtRFZDpwE/CyiDwQL/5FvCwZ8AMfNevB/xx4UERqgChwdVe1zTA622reoIEygmQjCDZR1vMuBzCAkezX4lhnQ41iSlmNYpPNCNLJ2T45qSkKYdtZ46UjKe+FhQs577nz2Fq3ld8f93tumH4DVjum9scU6mIQtMDTBybbdBvLC4GCBA/uh6NfVPV9oLUcyU/bOH4pcGZXtccwukoTNdSwaXtAB7Bw48JLCStIY2iL4zeymEI+xsIFCEUsZwjjGRo9nP8WCu8UOYE1Nwl+OApGpyXWjkgswu0Lb+fORXcyMnMkH1zyAVNzprbrvXxQDf8uhpoo+FwwMxNOynbWbzcw6RfD2BfYRHAGM7aMfBZuojS1KGuilkI+IUhmPKg7e4wWsZw3C8fyweaB5CU5S+xWheGPy+COg2DQHmaVrq1cy7nPnsuHmz7kogMv4q8n/ZVkb/uW3l1aC/dvgkFeyPdDyIZ/lThLE5yY1a6q+icB7QNB3Xy5MozdaKSJIkoopxJtdTFc8JOOhyARGreXKUqEBrIY1eLYWkriI+N2RAfBIhSFrxuKGJbsLOYl4izgFQPeLd59Gx9f+jgHPnAgX5V+xb/O+BcPnfJQuwM6wEvlkO6GpHjTfBbkeuHFMuebgwFqJfboSaanbhitUJQVrGIZq5D480zSOZyDCe6yfoswiGmsYz4e6rFwESNCGnlkMbrFkS48rX44hG1AvbukOQIWbG1ovY01oRqufOlKnlj2BIfnH87jpz3OsPRhHX7PxeEdAX0bnwXFEad9gT7QS+1KKmD3gf8GJqgbRiu2UsoXrCSdVFxYKEoV1XzMEo7isO3HVVDBJ3xEAw0o2XhpZDi5DGYMGQzbZV3zNIbgJUiIOnzxnYkiNJLkctPYkE/Q0/LmZE1UcWVEeSgUI0mEaW43BZaLDzd9yKxnZrGhegO3H3U7Nx9xM26r9T/nRhuabEhz7T43Pi4JPq2BnGbredXEYIjPWcd9X6cSJuLquRugiTJB3TBasYb1+PDgimcoBSGVFLZSSgONBAkQIsR7vIuFRRrpKEoDDWzAZmwrAR2cnvp4TmIFr1NHmbNlHX4muU6kITeJp9ZBhtfpIZeElOIhIT5IjZIWE6ICr0dCWB/fw8OL7iAvLY93LnqH6XnTW30PTTb8pxoW1jkLMA1ywwXpMK6N/Px3suHzWtgcggw31MacD4SLh3RsFE6/Iz5i3lF7Pg6Awq5syW6ZoG4YrYgQ2b5uyzYS/180vuFzMVuJECGd9O2vJ5FEFZWUUcbgNtZ3SWYAUzmHespQbJLJxsLNSXnODdH5W6AmApOGx9CMGKMsCxGhqmYjL71wCRs2vcuZB5zNP2Y+QJq/7aExj1fConrI84BboDoGd5fB7YMh19Py2JANJRE4cQCsqYfSkNNzPykLRpnJpwAoQszq/V9ZTFA3jFbkk0MRpQTwbx/V0kgTSQRIjk8gChOm9Z1EhQjh3dZvYZHCwJZnCRw0wHkAPBmOkRoFEeHLlc/x/KtXYWuUo06ew68nX0Sau+0/36oYvN8Awzw7Ui5pLqizYUEdnNts/vbmENy9BSqjO97N0Wlw/gAzlHFndh8YW2KCumG0YhhD2cAWtlKKGxc2NhYuZjA1Pl8UMslEcW6ibgv8zmJdSnqLVS86JkWExkg9c9/6GZ8t/SdDh0zl+999hPq0AoJ7iLY1sfj6UzvfeBUoju54rgpzip2e+rB4Lt1WeLMaJgRhSvsH0fRbihDrAwPVTVA3jFa4cXMk09hKKVspJUiAfHJIYkcuIoNMCiigkLV48aFAhDBj2Y8UUva6Dd6SpTzzzCyqK1dz5GE3cvT0Wyh3uckRIX8PM0QHup2US1NMqRHYFHN64aLwbS8Q/xAqicCGEOQ3W47GEkix4N1aE9SbU8KE2dLTzdgjE9QNozWquIiRyyBypfXcuCBMZgpDGMJGNmJhkU8+A9m7DSdstfnzB3/m/735/8hIGsgZZ79Edt6RFAnkicVsrw9rD3cu/RaclQa/LodiBb84N07dLtiEs9iXiLP2e2s1ifOfwGjBhzI8wWMXd2lLdscEdcNoThUaFkDd8xCrAvdQSP0B+Ce0eriFRQ655NA5i2UV1RZxwdwLeGPtG5y+/+nMmTmH5EAmm9XGi5ArkvAa6Pv71RlJE4UQsJ/PybF/EIITo87PgzyQ44XyKGTHb57a6txUnb73Xzb6FUU6LacuIiOBW+JPY8BtOHtI/CD+/ANV/UNH6jZB3TCaa3gLqh4B9xBwDwO7GiruhuxbwDt6j6dvFymCyFZwZ4BnWEJjAl/4+gUunncx9eF65sycw6VTLt0ewEdI+3O5hTFnaOJk/04v2LAm4gR1EbhsMPxpMxSGdhxyVJpJvbSmM3Lq8b0kfgdctm1jIBFJAc4HToovS/6YiIxW1W/aW78J6oaxjcagdi64c8CKD+Z2pYNGoPYlyLo2gTqiUPEI1L+HswpHDPz7Q9aPwdX6sruNkUZunH8jf/vkbxw4+ECeOuMp9sver9Vj2yMgradWwFmBcZs8H/xuGHzZAPXxG6YFPjM2fWdOT71TbpQeDGwE7ooH87fjz+erbk96PY/TczdB3TA6TBtB68C10+pVVgpENyZWR90CqFsI3uEglpPOaVoJ1U9D5g93OXxZ8TLOeeYclpcu5/pDr+euY+/C5/btWm8H7O9xbniWxyArHouqYhAUGL/TPh0BFxxs0i171EnplwJgPPA9VW0SkfuBXGBDs2MqgHZ8NdyhQ0FdRK5X1T935FzD6A1CRNjAVqqoI5NU8hiIV4JgZYJdB1az3INdCf7JiVVc9ya4BzoBHZzuricX6hdBxixU3ERQLIUHPrmPG16/gXR/Oq+e+yrfHvXtTn2Pfku4IV35WzVsiA9jzHTB1amQbAagt5tNhAa2Jnp4toh82uz5nPgmPwANOL3ybUt4zsPZAW7n3d/KO9LOdgV1EfkfVb0WmAmYoG70SbU08DofU08Tbiyi2KQS5AQ5hGDqWVB5L2jYCeyxCsCG5JMTq1zDIDv/WVmgMTZqIy9KPV/XF/Hy8zfyzTdvcdLok3nklIcZmDSw1er2Vr5b+G2mOkMaFYa6wWXyKh3kwyLhBdPKVLWtxew/A5p/bZsGLAUuFZF74imY7wF3daSVCQd1EfkWbB+kaX4rjD5rMatoIkwWqdvLKqllGWuZFpgG+KH+BYhuBd84SDkFPAnuiRucDjUvgLdgR1m0mLrAAfzDqqJwzSLmzr2ehsZqjj3xNi475GoGSst0TylR5lPLckIkY3EUSUwjuH3SU3tZIuSbRGun6IycuqoWicjrIvIUUA8UquqzIuIDnhKRKLBEVVd2pP6E/qlFJAO4Dme4DbQ+N9owej0bZR1b8eOlgRABfAiQRJBPKeQrgkQCKUwMXMGBpONr7x9xyrehcSmEC0E8zk1WVwbvJJ/Aa6/dwUcf/oPBA8Zw5XlPMnjQ/nxMHceSTnL8OtXEuJcyQiiZuNhAhF9TyjC8nEM6h+LH3wemqvdHnTmkUVUfBB7cqewp4Km9rXuPQV1Efg0cBFypqqEdxbJtDKWtqjftbUMMoztsoZz1lOCMMBd8uBnOINbTQBGN5BLGhfAaxayijnPIw92eP2RXMgy6BRq/gMgGcA9kZX0SVzx6Lhu2fslhUy/guyfcSrInafteSbXEtgf1j2mgAZscPHxJiA1E8QFrCPNvallOmMtJw2W+LPeIWB/4QE2kp/4czp3aw2h5d/YBnDSM3QXtMoxOV08Tb7KUTNKoohY/HiLEWMkWKhEyGEqF3Uh5SIk2+djiqecAbwNT2ruLkOWFpINRncr/Lf4/fvLqT3C5/Uw/+6/kjj2KxTSRQoyRJGEhpDf7M9xIhCAWddhsIkYaFoIQI0Y2FqsIs4oI++PdTQOMrtBv1n5R1SXAGSLypIh8o6qfx8vX7unc+FAdG+dO7kuq+riIHIeTyqkHNqnq9fFjWy03jM6ygTJiKDkMwsamlnoA6ggRJleKwd8AACAASURBVIO1tlLaWEcoplieOuywlz8VNvC7Ycnkt3O4X0VjBbNfmM0zXz3D0cOP5eDT7mBNShIKBLCoJsLHVHI1+QSa9f5ycbOSJiSeQRcEO57tDGBRj81GE9R7hE2EOkp7uhl71J7bJ1cAjwCnkWBOXVWvgO0zqN4RkSeAm4GTVTUkIr8RkeOBN1orV9X57WifYexWGGdcnwuLfHIIESZClCLq2YybWMhLOCwEXKC2Egk0gsR4dCXcMjXxyTgLChdw/nPns7VuK3847g+cOP0y/islzMBDISHKiJCKiyQshtJyYfODCbKIBqqJYaNEURqIkY8PLxYxbDL6QAqgPxK8eBja083Yo4R/O1S1Gvhb/Gl7E3o+nMH0Y4AVzXLzc3FmTbVVbhidZnB8d6JtS+X68REkgAcXPvxUx+ztW8nFLJtoVNhYrTz9DbyyDqJ7SDRGYhFuefMWjvnnMQTcAT685ENunHEjjeKcGMBifwIcQSqHkEIGbhp3yl5m4uZKshiPDwvnxulI/IzCRykxUrE4gM6ZnGS0j+JMPkrk0ZPaNdBJVd8QkXE4axS0x2+APwBZOMF9m4p4WVvlLYjIbGA2QH5+gkPMDCNaA7E6BnqyGWvlsJLNePGg2ESxOYACGmiiMhqj3h1CBRrqPYTr/WjIQ9SGx5bB5hq4dFLrPfY1FWuY9ewsPt78MZdMvoT/OfF/SI7n4gfjLL6y7cNEFYqJsUqjvK5RooQ50PLgjlecg4fLyOYs0nmWOr4kQhE2I3BzFikETU+9h/STnHor7lXVYxI9WESuAxar6nsiMpbWZ02Vt1HeQnxG1hyAqVOnmmGVxu7FGqH0Cah9HwCxkpg+YBYFqVMopAQXFiMYRAYprGIl+7lhWUkyHhdU1Nn4AxGqKtIYkQKjM+G9zXDSCBia2vIyj33xGFe+fCVuy81/zvwP3z/g+y1ez8PHBJJZQi2puFmtUdYRYYCdRLEKD9LANLxcaAVaLKmbgZtLSKcBmxiQYoJ5j9rWU+/tEh2n/jqwFWgEEu4ii8iVQL2qPhEvWg2MFxFfPNVyCrBwN+WG0XGlT0DNu6g3n+qwRUVNA8GaB0gd/gsOT9+/xaFnMJxnkgqpzAqxqgpsl0XNygKyxcv4dGfjCBHYXLcjqFc3VXPly1fy5LInOSL/CB4//XHy03b98xCE0xjEGIIs0hpK1GaCZpJNEEuELFU+tsMcKh4aIy5KbCXHJRzgFtwipmfeS8SIUd0iodA7JdpT96jqBSISJMFgKyLTgZuAl0XkgXjxL4A7gCdEpA4oBV6PLzW5S3l73ohhtBCthdr3UW8eX5ZarKkCCJImATaVvsnkSaMY32wvi8EEuVz2oyitgYW1yr+/DjIyxUVqSrN0i0J6PJ39wcYPmPXsLDZWb+SOo+/g5sNvxmW1/dXcjTCJVCLqZ4U2MLDZ13gRIWLDb+rDeKMeLIQYMNIlXJ/sMuu09BIWHvzk9HQz9ijRoK4AqtogInXxvPo2dmvTWVX1fVrv1b8df+x8fKvlhtEhtjNcsbzJxepKSPM5vW0fAbKi5dz/GdzzbfA2i8MuLIaSzOmD4MMgrCyGmsb49m4BmJIDw9Ni3LHwLn698NfkpeWx6KJFHJZ3WMLNCiK0tt1QYcwmxYYxrh298rUx5ZUmm+8He38ed1+g9J/JR605mx2/ljHgV53SGsPoLJ5ssFIoqazHZSVt34DZTyWVrmNpjMK6Shib3cqpFqTEoKQGmtT5RQ+FQbI2cNxj57FowyJmTZjFfSffR5o/rV3NGi1ussSiFJtsdXYxqlCbCluYutPwxsEWvBs2Qb336LxlArpSR4K6quovO70lhtGZxA0DzydQfi9pUoOPAD6qqGMw6/VboNBWVuOrEthSBTMLIGI76ZevK/7DHz68DI8rymOnPcZ5E8/rULM8IvzYlcTDsQY2ig1qky0W+0UCeHYaVmMDLpN56VU6aZOMLpVoUDe/WkbfkzIV17Bfsvrzt8l1lVImJ7BBj6C4MYU0PwzPaP20jVVgWdty6XW8vPYnLCl9iGz/NP7+nSc4ffzIvWrWIHHxc1cypdjYwEAsHvPaLAjZ5FvxDaFV2RqDs4K9v2e4r3CWCej9/x6JBvXmPXMT4I0+I2/gCHJGjeA/K3ZMg072wrWHgLuNv8+sINg2bKn7jGe+OYeKptUckXsLw5Nv44CBntZPaicRaXGz9Ay/xaao8k1MERQFpniF4329P4jsK6LEqKC6p5uxRwkFdVVd1OzpE20eaBi9jAicNBoOyYU1lc6N0f2ywa9VULMJ3CkQyG8xo2j8EJu1tXfzXtEtJHsGcf7+b+PRb5GfAaNbycF3hmRLuDnFxZqYUm7DIEsocLF942mj57lwk0TXbGbSmdqdU1fVfzR/LiJp8SUEDKPXygo6D2c65zwoet75zqkKSSNh+NXgSWNL7RYueO4CFm15kwnZpzM+40HcmsnUPJg12UnLdBVLhNFu6djGlEaX6zerNIrIf+LHCS0X8npLVe8FngWO7ZrmGUYnq1kKW56GwDCw3E5Qb1gHGx9mXmQEFz9/MY3RRh787oNcMvkSmqLOmuf+zsm6GH2YM6O0HwR1VT1rD4eYpJ/RJ9Q3wdYVC6AulaQUNwPSwGUJje6B3LDo79xXuJLJgyfz5BlPsl/2fgAETDA3tutnQxpF5EBAVHXxTi+ZNViMXq+oEn4/F2a4Gkh3e6jbClkpkDSgmAs+foYVNaX89JAruPP4e/C5zSqIxq761eQjEbkWGA64RWSTqv62a5tlGJ3rsYXQFIGGlEMY7fonLjuVRzd9wmNL55Ph9fHaEWdxwtH3gvT+P1qjZ0SxKaO2p5uxR4n21E9W1RMARORtwAR1o8+ob4KvNkN+Nmy0ZxC03+Svmx7i3drNzEgZyrOHH83Acb8wAd3YLRduUhjQ083Yo45MPooBiMh/4+fXdXajDKMzbVth0VZYWb+Q3295iCa7kgsGXMBxA37AwAOngTeLGDZrtIqloSqClpvJ3kyG0M79SY1+rT/l1D8VkV/hBPdPAFT1+7s9wzD2UgNhCimjlhCDSCWPDFwd+KMK+GDyiBB/X/r/WN74Zwb4DmDWkPk0VE8gfxzghRjKo7XreKuygoY6N+qyyUop4aKsfKb7ev/YZKPr9asZpap6s4gcE//5ra5tkmFAOXXMYylhovGlaJUhpHIS4/G2c3rFV6Vf8eC6WSxvXMJY31UckvJHQrUBjh4PhzuDXPiyoYaXSyrw1AfJ8AhqQ2WpzYPRjRyYl0lQOrr2ndFfODdK+8GQxm1MMDe6i6K8wzcAZMfTH4qyhWq+YiuTEtz8V1V58PMHufbVa0nyJjH3B/M4IO27VDdATiYMabb2y4KyamIRF2leJ9MoQLrXorxRWVrdwKHpqa1fxNhnRLEpoaGnm7FHiUw++jG7jkX/OP64CNisqq92QduMfVQDYUqoI4vg9jJBSMHHN5QkFNTLG8r50Qs/4rmVz3HkiKN56NSHGZkyrM3jm+o9WG6N3zHaflEsgVCjBel7846M/sCFm3TaWAWuF0mkp74EcAH3ANfidGKKgDuBTcDpIuJS1Ze6rJXGPsXJm+86/cFG8Sbw9fftdW9z/nPnU1xfwmnH/5ijDzuHV2ULBxDjCApazcsfHMzgw8YtxFxRXDE3ihLxhJGaAONzkzrjbRn9QL/IqavquwAiUq2q74hIlqqWi8hhqnqUiOQAvwdMUDc6hR8Pw8mmkIrtvXUbpY4Qh9H2sreRWITbFtzG7979HflZI/jJOQ9w0JApWFjYKEspIhkvU1vp6R+e6+e1d0fyzYBCvP5GFCVaGeRU9wiyksyiWkY/WvulmT+KSCbwiIicwo4vqsVAVqe3zOh/VKFxE9SvBcsPaePB3Xov+HBGUcdySqhF4ssOTWQoI9sYJ7y6YjWznpnFJ1s+4dLJl3LIiRfi9fqx4j0rCyGDIEso4iBy43Xu4HXDbYel89aqiby7ppGgRzipIMDUAhPQjR36xZBGERkIlOOMR38cuEpVbZHtMzVGABu6rolGvxBpgC9ugS2vxVdGHATpo2G/myB51953EC+nciCl1NJIhAyCpEVsWP80bFnkTBTK/RaadyKPrfgvV718FW7LzX+//1/OHHcmf+cjPDv1qjxYVBNtbYtQ55o+mDnBYuYEk24xdqVI/1jQC7gNZ4mAo4DzVXVdvPxxEfk3Ti/9hp1PEhEXcDtwkKqeGC97A1jd7LCbVLVKRCYBd+F8cDQAs1U10rG3ZPQ6asOSX8CmeeAfCOKCxkqILofV98KkPzllO7EQBhEfdWJHYcnvoPobCA4BlOqv/80Vb93OU5uXcOSwI3n8tMfJS8tDFTIbM1lLOUN9QdzxqqtpooB0LLPPi9EBEWy20NTTzdijRHLqVwGISDbwFxHJVNUHVfX/RGQhUK2qpa2cOhOYB0zbqb7LWzn2LpwPjAoRuRS4EHiwfW/F6LVqVkPZh+BNB1d8sSxvOoSroXY9NGyEpILd11G5EqpXQ0oBiPB+5UbOXfYaGxur+c1h13HTcX/EZbmoqIf73oFvavOITKhmqbee/bLdZKZF8eHiMNoeAWMYu+PGRSbt22i8J7RnnHoZcK6IPCwiL6pqkaqu3s3xz8MuO7fUicgdQAHwjqo+KCJ+IKqqFfFj5gJ/xQT19qnZChs/haY6yBkPg8Z17Y4O7dFUAkjLnMe234toAwntkNiw1TlclbtWv8OvVy9kWCCNdyeexKETzgDLhSo8sAjWV0BBqh97/USqUkr5qrSOc8clcWTqAFIwKzAaHaP9bendbVT1oo5eTFVPBRAn0t8vImuAlUBVs8MqgMzWzheR2cBsgPz8/I42o//Z8Bm8d5+Tq7ZcsPIVKDgUDpvtPO9pvizwZkPjOicVs+12jB2CwGAIJjCZKDCA9U11nLfin7xbuYHzcibyt3Enk9q0FfzOffqtNfBNCeRnOJ8ZrqiXrMpcmqqg0oKUQ7rwPRr7hH6RU4/vfOQBZgDv4nSr9gdWxH8OqerZ7bmoqqqIvABMBN6DFiP6M3ECe2vnzQHmAEydOtWs4w4QDcGH/4BgFnjjk3VUYd0HUDAdcif1bPsAUsdA1mQoroJI/J820gi+dDjg1lbz6Tv7T9FyZn/xIrbaPDbhFM7LGQ/1myF1BKSPAaAx4gTznbf19LqgtrGz35Sxr+k3a79s2/lIRN5W1dPjP/9WVW/ey2sfCcxT1ZCIeEQkQ1UrgVOAhXtZ976jcoMT2FMG7SgTAU8QNi3uHUHdcsEB10PSMNjyOkRrYOhkGHuV01PfjbpwHde8cg0PL3mYaTlTeXLSGYyo+wYaiiH3KBhx+vaef24a+N3QEIag1zlfFWpDMDmvi9+jsU/oFz11gPjwxQEicicQgXatR7p9FIuI3B0/1w98pKrvxV/6OfCgiNQAUeDqdtS/b7M8tLr5lB0Fb6Dbm9MmTwqMvhBGXeA8T2Dt8k82f8KsZ2expmINtx5xK7/81i/xuDxOCqeVOnwe+OGhTl7dZTk99LoQTMiFKSZbZ+wlRYi0P2PdJhFxA48Ctap6mYgcB1wH1AObVPX6jtSbaAvvBd4A/oOTcrlYRG5R1Tv3dKKqntTs55+2ccxS4MwE22IA1JbD2o+gphTCNlQXQdoQ57VoCOwYDDu0Z9vYmgSCua02f3r/T9zy1i0MTh7MggsXcOSwIxOqY9pwyEmD99dCdRNMigd0T+/vYBm9XBeMU78VeAQ4K36f8WacDYlCIvIbETleVee3t9JEg/okVZ3R7Pk1IrIIZ/0Xo7sVr4GX/wDRCLi80NAIxWshpwHcHidHPe1CyOx7w/c212zmgrkX8Na6tzhz3JnMmTmHjED7FlHKy4QftHqr3TD2Tmfl1EVkFvApsCpeNAZYoaqh+PO5wOlAlwV1t4j4VbUp3qAg4G3vxYxOoArvPARu346eefpgKPHB8GNg5MGQWQC+vrdjz/Mrn+eSeZfQGG3kH9/9BxdPvnjnIbGG0WPa2VPPFpFPmz2fEx/ogYhMBgar6pMiUhB/PYuWA0Qq6ODyK4kG9RuBl0XkM5xleCfHy4zuVlcBlVsga6ckcXI2lG2Cwzs84rTHNEQa+OlrP+WBzx5gypApPHn6k4zNHtvTzTKMXbSjp16mqlPbeO1sIF1EHgBSgCnAMnYdBVjekTYmuvPROyJyPGxfIm+NqsZ2d47RRdze+FydnVYwsaPg63trlnyx9QvOeeYcvir7ihun38hvjvkNXpf5Emj0PiFgPfZe16OqP9/2c7ynfivOfcv5IuKLp2A6PAqwPTNKY+zI/xg9JZACw6dC4eeQMdQZvhiLQkM17H90T7du9+ywM+HIlYwCf/3or/zsjZ+RGcjk9fNe5/iRx/d0Cw2jTR4sBjfbuKWTxHBm1Mfis+2fEJE6oBR4vSMVmo0X+6IZ50NjDWxdxfbe+tTTYNiBPdqsNtkhKHkOKt8CjVBsp3PR55/zyrp3mDlmJg997yEGJLW+pK5h9CadvUyAqm4ELo///Dbw9t7WaYJ6d1CFLWuhqgRSsyB31N6tyxJIhZk3QcUmJ7hn5ILXD5u+cIYzZo+AlF4UJLc+DpULwZfHq0WF/PC9v1MTDXPv8Xdy5WE3m5uhRp+gQEz7wYxSYy+FGuG5v0Hhcue5KuSNgTN+AoG9yIGLQFZ8mmR5Ibz4Z2iq3fH65NNhwsxd58wnonwVfPMS1GyCzJEweiakdXD2TqQKqt4l5BnKTZ+9yf+s/Ijx6QN5c9oMxheM6Fj7DKNHCLZtgrrx4SuwdhkMLnACmCpsXAXvPQ/HzYKKIvjiLShZD0NGwqRjIK0dvWw7Bgvudep1CVRvdH5+9+8wcAwMbucokuJl8OHd4EkCXwoUfwFFi+GIWyG9A+Peo9V8VVvDOR+9wheVxVw99hB+P+U4AloL4aL212cYPUQVYrHeP4vNBPWutmQBZA3Z0SMVgexcWLIQxk2Dp3/v/LYEkmHrGli2EM6+FbJyEqu/fD3UlUNjMVRvAncAUKhfD+/8Bc66L/G2qsKK/4A/3XkAJA+BumL4+nmYdk173jmqypxl87hu/vMkub28cPQ5zBzqLL5FUy0E92tXfYbRk8IqrAv3/m+WJqh3NY3tOq1dxOlhv/MvZwbotp55UhqUb4GP5sHJre0l0lr9NoRqoHozBDLYfuPUF3V63TVbIDXBDwg7AjUbIW2nHnkgAyq+TqyOuPKGci594VLmrpzLCXlTeGRiAUNSsiHWAJEy8GRC+ow9V2QYvYRHhZxoYsNtV3ZxW3bHBPW9FQnD2q+gsR4G58Og3JZ54vGHw6evw6BmgbJ8CxwwHVa9CwN3CqBpA2DdF4lfP2uYM0Y9FmV7QFfb+dBIzYaqDbsP6uFaKP/KOSdjDPgznP1Evc3y/eE6SBqScJPeWvcW5z93PqX1pdx9wt1cO+0nWHVLoOJ1iFZB5gmQ9W1wpyb+Pg2jh6kKtkm/9HOlRfDIn6C62cSvacfCd87dMbpl+kzY+DVsLdyRUx+QC986AzZ+AZGmlqsphhshuR0Ll7g8cMjZ8NJtUF8FoqACg0ZCMHX3ywWULIEl9zk9dNRZMyZzEmz+BCQHPAEnoDdVwoGX7LEpkViEX779S37/3u8ZkzWGF895kclDJjsvph5EOHAQa7YAIRihmD2IjD5HY+ZGaf+lCk//3RndklPglNk2fDAfRh4A46Y4ZcEUOP9WZ/RL+VbIHAgFB4DHCwefDAuehAH5ThomEobqUjj5iva1Zfz3YN3bUFvmrKOenAV2EwTSILuNvHW4Dr64D3xpzk1RcIZDli+GsafB+gXQUAr+TJj6Yxi8+3XZV1esZtYzs/hkyyf8aMqPuOfb95DUrLf/9Qb437nQEN+3N+CDK78HBwxv31s1jB6jAqan3o9VlMKW9U7KZRvLgqQU+HzRjqAO4HbDqEnOo7nJJ0CoAT571flAcLnhqFmw/2GtXzMacW4w+lOcD4FtvElw7K3wyYPOMMRIDWSNgoN/5NTZmsqvIRbZEdDBWSQMhaR0OOEeiDY5vfXdLHWrqjz6xaNc9fJVeF1env7+05wx7owWx9Q3wv884wTy7IFOWV0j/PVZ+OPlkNr3Vjcw9kFhGwqbTE+9/1K79THW21IsiXC5YMYZcNBJzjT/5AxnEtEu11L44jX4ZJ4TaL1BOOQ0GH/Mjjak58Nxt0N9qbPTUCBz92PA1W57v2eNOXV4dx9tq5qquOKlK/jXl//iW8O+xWOnPUZe2o4thsqq4POvYelaKK6ACSN3nJscgLIaWF4Ihx2wa93hCCwthA2lMDAdpoyEoMnXGD3ICxRoYqNf1ndtU3bLBPWOyhoEA3KcfHp6tlNm21BXDQdOb19d/qDzaMvyhbDoCcgcCp6BEG6CBY84C3iNabYRhggkD0zsmhljQdwQbYwPgwRiYUAge8IeT39vw3uc++y5bKrZxJ3H3MnPZ/wcV7NNrhd/DX97BmI2lFbDV5ud/zyTRu34rFGFUGTXuusa4Y/PwfoScLsgFoNnk+HnZ8Cg9i2tbhidqw8sY9j7v0v0ViJw5mzn/7cUOo+i9TDlCBh3UOddRxU+ewHSBoMn3lX1+p1lAD57oeP1+lJhwqXQVA4166CmEOqLYP9ZkNT2vqFRO8r/b+/Ow6OszsaPf+/Zs5IVAgkQKEQ2WTSCIlKx4r5Q1KpQWmoV66v2VV6tvrZatVpb/dlaaovFttq6YLUKbliLCojgD6TIIrLDAIFAFrJvk5k57x/PBEJIICHLTJL7c11zmefkmTP3PMR7zpznLI8sfYSJL07EbrOz4qYVPHDeA8ck9BofPP8OJMZB/zQY2t9qme/MgfziUD0B69JlZRz/Gh9+CXvzILMnZCRD/55QXg2vLT/1t6tUqxmspN6cRxhpS701eveDu34NO76CijJIz4SMRqa++2qg4IDVGk/s2bKp8cZYk4tSGgx9dEdDaV4r4x8HCYOh4CsgCElDIaZXk6d7i718963vsmLfCmaMnMGzlz1LvPv4YYneXKj2Qc9QqzrGAyP6wRfbrO4Wn99K6lMmQJ+U419n5Wbo2ePYsrQEWLfb6pZxOY9/jlLtri6pR7h2TeoiYgceBc40xlwSKmt0c9W22nS1w0VFw+ljm/79+hXwr5fA77MS9IDhMGUWxDRzjLbNBr2zrI0x4uplwPJCSB/autjB6nvvO/Gkp7321Wvc+t6tALwy9RWmnT6tyXMdjQwQGNQH/H7ISINzRsCYQTCwieHzLifUNuiWCRprM+nWrIOmVKt1gqTe3v+LXAG8Q+jDo97mqlONMd8BKkVkclPl7Rxb+9u/C955HmJ7QK9+1sO7Gd7+c8vqGf8dazx7US5UV1gJPhiAcVPbJ+56ymrK+MHbP+DGN29kWOow1t267oQJHSCzNyT3gMKSo2W1fmv0y51T4dpvwjfSm/7CcsHpcKjE6oMH67NwfyGcN6zxDwylOoIvAN7y5j3CqV1b6saYt4H6S6s2tbnq3ibKW7zpakRZ96k1Ht0duhEpAj0zYOdGKMqHxGYu3JU2CK59CNZ9CPl7IONsGH0xJKW3X+zAF/u/YNpb09hVtIsHJz7IQ998CIft5H8ydjv8+Dr47Wuw9xDWvCaBGZdYCf9kJo2E3Ydg5RardR4IwtAMuFZXFVBh5BLIbGajojuNfmlqc9U223Q1opSXHL25WUcEbGJNWmqJlH5w4S1tF1sTyith254AL217imc3PEjv2N4s/f5Szut/Xovq6dsLfn07bN9n3TgdmA49mrkXtsMOsy6BK86Cg8WQGAOZvXSVXhVm2qfeqEIa31y1qfJjiMgsYBZAv36nuL53Rxo8GrauhR71Pp+qK62bnCnNX0ulo3y+Hn6/YD9LmMFBWcIg23X848o/cUb/UxtH6HTAsFbMGO2TbD2UihidIKl39G2nHcAIEalrvtZtrtpU+TGMMfOMMdnGmOzU1Aja2acpw8dBxmA4sBuKCyB/v9XtcvnMY2eEtrGamiCHDtVyMC/I4aLmzYU6VAg/e3MhC2wjKZTVXBX3Vy5z/oMX/5mIr5Gx5Ep1Ozqk8Ri1YG1e3djmqsYY01abrkYUtwem3wObv4Dt6yE+EUadd+zSAm0oGDQsWFDEvD8XsS0nloB4GDTIw/kTXPzwRiG9kS8He/fByrWVPPnVbL60/4ne9jO5Ju5Vkh1Z4IG9ubB9Dwwf1C4hK9W5dIKWeockdWPMpfV+bnRz1bbadDXiuD0w+jzr0c7ee6+In/1sH/k1vRCxgalkw9oqojwJHC7y8MQDEFVvQcjFn8Dv31rHp4nTKHFsJmHfTxgf/QuSEo9dM7rW3+6hKxXxfAHwlpz8vHDTyUddyLPPHsSPE4fLjcdRC9iprAywdXMZqT09fLUVzhptnVtQGORni+bwn5T7iJJkpvgWs/PQhWzzQ1JCILS5h2CzORjUT+9QKuUSyGzeHhndavSLagfGwOrVQdau7YE9KooauwNXjB+bGDweG0WH/eTsK+F3c3Yx9BtljBofy+Obf8rquH9xmlzFVfa/EOVIwdbb8Nn6AO//u5roKOt75oRhlfiqUyBap3Gqbq6TjH7R+XldwMKF8PvfC06nC3+NobraRXFRNEEDNT5Drd/Hbm8xLns5q4uWct0nF7Amfwlnl/yR6+0LiZYURCDR4cNdXkVWmo+xp9Vw9bgyHL5yXnyxlcsRKNVV6I1S1VaMgaoqcLms5dnrlJbCe+9BZqZw5pluVqyswO2upjrooajIg89fi9tjI6NPPl+n/45V8iY9zQDG7p1NqutmSsuEHqEVC7bv8BHnMYwdUkGUxxoyE9PHxcaNlZSU+OnRQ/9cVDfWSVrq+n9pRwsEYPdWyN0HiSmQNQJcJ14ofOtWeOVV2JcDHg9cdBFcebmV3HNzrYTvcMCYMXFUVgbYvr2KmhI7PqeD2JgA9qQvWT34TqplC2PNg4KJlQAAGJZJREFUVCZzKwdMFVMuL+ajZanszQFCHxqjh5UeSejHht3MNeKV6qJ8fvAePvl54aZJvSPVVMPffgc7vg7tJmQgKRVu+Yn130bk5MCTT0NsDPTrZy10tWCBVdUN10N8vLVGijFgtwsTJybSp08ty5YZxpxRS17feaxO+jn2QAyDVj/PRWcMxmYLYkwlpw93cMlFsHO3Vce+PQFefbWSQMCF12vYsSNIaWmQAQPs+Hwde6mUijQuG2RGnfw8CO+NUu1T70iffwLbN1lL9Kb3t/5bVgLvvNLkUz7+JLRLXkyAwsJKqqtr6NvX8NEnUFEBaWkwejTs3Wt9CTAGDhwQopIL2TzyBlal3k/c4TMZvuyfxB64gKIiJzk5pQwalERmZgIuFww9DYYPhUmT4hk5Mpply3x8/rmfsrIAUVEQH+/hiSeKKC7uBN89lWovOvlIHWfNckhusJ56Shps3QDVVeA5vhmQs99QkF/Cf9bkY4zVDeJwOBCJY+7cw1x1VS9mzUpg/nxYudJqcfsyPiFn/Ex89kIuMr9mqPMW1jnyyCnzkZdXyqRJfZg+fWT9hdYAcLtt3HRTGitWHKRXryCxsXbS0ly43Tb27q1lxYoqLr+8mQu4KNUVdYJ2jSb1xlRVWYnX08h+oa1ht0FtE33TTaxWFR1VysaNpfTu7URE2Lu3gpKSGjwe2Lr1EI8/nsNNNw3hhz9M59rrfTy87CFWrnmSmOrBTNjxOrG1o/H3tjFkSF/GjTM89NBAYmKaHmxbVBQkKclB377HDmGMjrbh9eosJNWN6Y3STig/D954GTZvBATOOAum3gg9Etqm/rPOh4V/h+jYo0k8bz+MyLZmnjbCV7ObqKhEyis8+P2VlJfbcLpiiPLsIDk5GnDy6qvbSRpUyk2LvseaA2u4OOWH1L73KPt3x3AgGGD9+gAjRth5+OEoYmJOvHZocrKdYND6RmC3H/2gqawM0r+//rmobk6TeidSXQ2/fxLKy6BPX6tzet0aOHQQ7n3IWiS8tcadD96tsHENEEqYffrClU1vOmFMNWeP9ZJfmMb6DXY8bh9JSfuoqjxEbm4f+vaLZrP7A85+8Q+4HS7+evEbfPqnyaSfaSM4BoqLQcSQmxtkzhzh4EFISYErr4QJE47/gpCQYGfSpCg++qiK3r3tuN3CoUMBYmJsnHtuM+8SKdUF+WrB2wmmbGhSr/P1BjhcAH0zj5b16Qv7vLBrOwwe0vrXcDph+u2wfw/k50JcAgzIOuEHxllnpbF58yZGj8zHYSti7doScg8YRGDt1wd4L+o5DvdewfieE/nH9a+wb1NPPqUKh8PK1j17QmmpjY0bnfj9QUaPtlFZCfPmQWUlXHyx9TqBAKz4D3y8Aiqq4uk7xEXBvnJqawKMHu3iuuviSEzUbYdU9+WyQ2Zc887VZQIiQdHhxvu1RaC0DVfxEYGMTOvRDOeem8Hnnx9g+/YifL4gBQV+3G4hafR+tp/5DDWuwwzY9X2WPPA8LqeTPPfx6+Tu3GlHxJCaKthsEBtrjWt/+2244ALrs2b+O/DhckhJBIdd2H84iv5ZUfzvbQaPR9d+Uaqz9KnrkMY6fTKODviuY4y143Gv8G1o4fE4uPfesdx222iSk+MYNiIex4WL2Dr+QYzfzrhNTzM+8AMO5lo7AQ4d6iA6WiguDh6p49AhweOBnj1t9eq1epxKSyG/ED5eCQMyoEccxERDZgbs2Q/rt2hCV+qITjCkUZN6nayhkDUM9u2GinIoK4U9uyB7HKT3PfnzjWnebhSnwO12cPbZ6WSNBe+khzk45HWG1l7Cbbb5XDJiIi6XnWDQeu2oKGH27GhEYO/eAHv3BoiODnDaaQ7c7qMJurraSuzx8XAgzyBisDX4a3C7YGc4v0cqFUnacJy6iMwVkT+IyHwR+W6o7EIReV9EXheR35xqmNr9Usduh1v/G5Z/Aqs+s44vugLOOe/Em2NWVcKHb8PKpRAMQPZ4uOwaiO/RpuHN3zifXx6+lRp7kG8HH2ek81JwQkmJj4QEFxkZMUfO/cY3HDz1VBy7dwdCSwjYeeIJIS/PuklaUQF5eXDddQH++c/9vPdBCV/s6M2QQQ6GDYvD47H6zn21kNYJNphSqkO0YfeLMeY2ALEmi3wqIq8A/wtcZoypEZHHRGSyMWZxS+vWpF6fxwOTL7MezREMwl/mwI4tkJZuJf/Vn1kt/LsfslbfaqWymjLu+OAO/r7+74zPGM+3zWN89ZmDPVKBMQaPx87s2cNxOI5tZjscwuDBR/95H3gA3nwTvv4aUlNh1izDZ59tZ8uWMvpnRHGwvJbN2w2FhwuZdH4qhcVCbAxkn97qt6BUl+CrBe+BNq/WDRwGsoCvjTE1ofKFwFRAk3qH8u60EnpG/6Ot+fR+1oiZbZtgxJhWVb96/2qmvTmN3cW7+fk3f87PJv4Mu9jZfUE527eXEBPjZOTIROLjT/7hMWAA3HPP0eMdOyrYurWczMxoRIRxQ4uJjYrn690uNmz2cW62m+lTIL6Zd/uV6upcDshs5h7sLei1fAx4EkjGSu51DofKWkyTemscLrCSecPuGRHIP3TK1QaCAZ5c8SQPLX2IPnF9WDZzGRP6TTjy+4ED4xg4sHXZtqDAFwrdit3lNIwZXEKCs4pvX53OlKvSWlW/Ul1Oy7pfUkRkTb3jecaYefVPEJG7gS+NMStE5DSg/kdGElB4KmFqUm+NlJ7WP7QxxyZ2Y6DnqY2YySnNYcaCGSz1LuU7w7/Dn674EwmeNprRWk9qqit0b9ccswaMYBjQv42XR1CqK2hZUi8wxmQ39UsR+S+gwhhTt5rfDmCEiLhDXTBXA8tOJcwOT+oi8iWwKnToB+40xhgRuRC4G6gAcowxszs6tsaYYJDgrp2YQ4eQxERspw1B6iYL9R8Ipw2HLRutYY9ig7xcqzsma1iLX+utzW9x8zs34wv4eOHqF/j+qO8ft+hWWxk4MIYRI+JD68q4sdmE3Nxq+vePZtiw+HZ5TaU6vTa4USoi44H7gUUi8lyo+EHgF8ArIlIO5AP/PpX6w9FSLzTG/Kh+QegOcJvc+W1LpqYG33N/IPDVBiu5GpB+/XD/eDbSo4fVOp95Oyz5AFYusaZlTpwMk6+0ZvQ0U4Wvgtkfzmbe2nlk98nm1amvMjh5cDu+M6vb5Y47vsGiRQdZsiSfQMAweXJPrryyN06njnRVqiGfD7w5ra/HGLMS6NfIr5aEHq0SjqRuF5EnsN7UG8aYhbThnd+25P9kMYEN65DMAUdazCZnH743X8d90y3WSVFRcNlU63EK1h1cx41v3sjWgq3cd+59PDrpUVz21o+aaQ6Px87UqelMnZreIa+nVGfmckBmM29ddqtlAowxkwBExAm8ISKbaOadXxGZBcwC6NevsQ+6thX4dCnSs9exXSC9+xBcvQozYybSgtZ4Q0ET5Hf//3fc//H9pESnsHjGYr418FttELVSql10kmUCwnaj1BhTKyKLgeHAZppx5zd093geQHZ2dvtvmhk01hroxwUSPL6sBQ6WH2Tmwpl8uPNDrj7tav581Z9JiU5pVZ1KqQ7QCZJ6uDtPzwHWUe/Ob6j8lO/8tiX7hImYQ4cw9af/H8zFlj32lFvpi7YvYuTckSzbs4y5l89lwfULNKEr1RnodnaNE5G/AVVALLDQGOMNlbfJnd+25LjwIoJbNhPYtuXI0D/p3QfXtde3uK5qfzX3Lb6POavnMLLXSJZes5RhqS0fIaOUCqNO0FIPR5/695sob5M7v61lAgF8OTmIzYYzPR3X7HsJbt9G8GAutqRkbEOHtbiVvilvEze+eSMb8zby3+P+m19d+Cs8Dh0LrlRn4qsBrzfcUZycTj6qp3r7dvLnziVQXAyAs1cvUm+/HdeQodiHDG1xfcYY5q6Zy//8+3+Id8ezaNoiLh18aVuHrZTqAC4nZPZq3rnhHP0S7j71iBEoLeXQ008TLCrCVlGBrbIS/4EDVpnP1+L6CioLmPKPKdy+6HbOzzyfDT/aoAldqc5M+9Q7l4r16/Fv2YKtqAgjgqmpwdTWYnr1onrTJqLHNH9xro93fcyMBTMorCrktxf/lh+P+zE20c9PpTq1TjKkUTNNSMDrJZCTA7Gx+IuLqS0qwl9aim/DBoqeeYZgeflJ6/AFfPxk8U+Y/NJkEjwJrLp5FXedfZcmdKW6ik7QUtdsE+IIWP8StQUFBKursXk8SFQU4nQSPHCAinffPeHztxVuY/xfxvPUyqe49cxbWTNrDaPTRndE6EqpjqDdL52Ls39/PL16UbZ5MzaXi4DPhwkEcMfH4+rbl6rly4m78cbjnmeM4YV1L3DnB3ficXhYcP0CpgyZEoZ3oJRqT74aawuFSNdtk3rdzU9baHci16hRxA0ZQiA/n4Ax1pBGjwe704ktKQlTWXlcHUVVRfzo/R/x+qbXmZQ5iZe+/RLp8bqOilJdkcsFmc1cnWTP7vaN5US6XVL3FxeT/9prlK9eDUBMdjapN9yAMymJmDvuwOf1UrN3L7aoKGxuN46zziJQUEDMpceOXFm+ZznT35pObnkuv/rWr7hn/D3YbfZwvCWllDqiWyV14/ez/+mn8eXm4kq39hStWLsWX04O/R55BNeYMaS89hqHH30Uf04OEhdHsLwcZ1YWMVdeCYA/6OfRZY/y+PLHGZg4kJU3reSs9LPC/M6UUsrSrZJ65ZYt+HJycPfvf6TMnZFBjddL1ddfEzNqFPbUVFKeeYbabdsIFBRgT03FmZWF2GzsLtrN9Lem83nO58wcPZM5l8whzq2beCrVfbRuMb+O0G2SujGGyl27qK2qwtVgCzcD+IuKjhyL3Y5r6LEzSF/d+Cq3vX8bAPOvmc8NI27okLiVUpHB5zN4vbXhDuOkukVSr/B68T7/POVbt1Kxbh3ReXmknnkmzpiYIyswOtMa32i5tKaUOxbdwUsbXuLcvufy8tSXyUzI7MDolVKRwOUyZGY2b3b5njCuE9Dlk3ptWRnbnnoKsdmIHTYMU1pK1e7d5FZU0GfCBPz5+USffjpRWVnHPXdVziqmvTUNb7GXh7/5MD+d+FMcti5/yZRSjeocU0q7/OSjknXrCFRU4EpORmw24saOJeb006nYt4+cd9+loqQE15AhUG/N9EAwwC+X/5Jz/3ougWCAT2d+ys/P/7kmdKW6NQP4m/kIny6fpWpLSjAiVBQVEQgEiHK7qdq/H1tcHPETJuBJTubA669TW1ZG+rRp7CvZx4wFM1i2ZxnXD7+e5654jgRPQrjfhlIq7DpHS73LJ3Xi49m6Zg1+ux0RwV9SQoIx9IiLw5WYiD06mujMTAo/+ojPsvzc9vFd+AI+Xrz6Rb436nvH7k+qlOrmNKmHlQkG2fTBB9h69MBZWoqvqoqqQ4co8/kIpqURu38/SVlZVNkD/CJ5BW++/wLZfbKZf818BiUNCnf4SqkI4vMF8XqPn1keabp0Ui/2eik/eJDUc84hd8kSqnJycERHg92OPyaGwk2b2BlfwYO9V+KNKeTe7Lt47JJf47K7wh26UirCuFyQmdm8/e519Es78dfU4Csupmj9eir27kUcDmsRNWPwVVXy9ugqXkh7j8SAh9f63s93Ln8i3CErpSKW9qmHXVxaGsVbt2KCQWqqqsBux+50UhxreOGKYtb3LOPs/XG8cMXzZF12TbjDVUpFNE3qLSYi04Hrsa7c58aYJ1tTX1VeHm63m3yvlyBgamvZ2K+af17ux++xcW/RBGaOuoEhV13fFuErpbq88A5XbI6ISeoiEgfMAC41xhgReUlEBhtjtp9qnb6yMvzl5aRlZVFSXMA/hu5j+Zha0vNszF45mPEjR5I5dWrbvQmlVJfl8wXwek++A1q4RUxSB8YDi405MgvobWAScMpJXVwu7G43B2IreXbiIfbF1nLRlkQu/0TIuiib0Y88giclpS1iV0p1cS6XkJnZvPmaeqPUkgwcrnd8GBhc/wQRmQXMAujX7+Sr1UelpJA4ZAibqjZQ6qjhnhUDGJnfA8+oVE6bMUMTulKqBbRPvaUKgeH1jpNCZUcYY+YB8wCys7NPOrYotndv0s87j2+uiWJC4Xjc/RwEM4I4oqLoPXZsW8aulOry6pYJiGyRtPbLKuBCOTqF8yrg09ZUKCKMmjWLzMmTcQUdBAMBkrKyOPv++/Ek6NR/pVRLRf7O0xHTUjfGFIvIS8B8EfED64wxW1pbrzMqihHf+x5Db7iBYCCAMyqq9cEqpbqhztFSj5ikDmCMmQ/Mb4+67S4XuoOoUupUWaNfisMdxklFVFJXSqlIZY1+ad4SIjr6RSmlIp6OflFKqS6k7frU23r2fH2a1JVSqtla31Jvj9nz9UXSkEallIpgdd0vrR7S2NTs+TYhxjRvfeBIIyL5QEtuR6QABe0UTmtFamyRGhdEbmyRGhd079j6G2NSW1OBiPwLK87m8ADV9Y7nhSZPIiLTALcx5oXQ8QXAOGNMm6z93Wm7X1r6DyQia4wx2e0VT2tEamyRGhdEbmyRGhdobK1ljLmkjao66ez51tDuF6WU6lhtPnu+vk7bUldKqc6ovWbP1+lOSX1euAM4gUiNLVLjgsiNLVLjAo0tYrTn7PlOe6NUKaXU8bRPXSmlupBu0f3SnrO3TiGWL7FulIA1Pe3O0ASEC4G7gQogxxgzu4PisQOPAmfW3d1vKpaOjLGJuD4CdtQ77f5Q/+Qo4JdAOVAJzDLG1LZjbHOBINaohfeNMS9HwjU7QWxhv24i8kfACcQA24wxD0fKNetyjDFd+gHEAf/iaFfTS8DgMMbzUSNlAnyMNXYV4DFgcgfFczUwri6upmLp6BgbxtXUtQuVvw8khX6+Gbilg66dAMsj5Zo1FluEXre/AadF2jXrKo/u0P3SrrO3ToFdRJ4QkVdEZEqoLAv42hhTEzpeSAfFaIx52xizql5RU7F0aIyNxAVQLiK/CE2rvgVARDyA3xhTtxVih107wI217WJEXLMmYoMIum4ikgikAglE3jXrErpD98tJ9z7tSMaYSQAi4gTeEJFNNB5jchjC4wSxhD1GY8wUgND43rkishPYAtRf5PowVtdDR3gMeJLIvGZ1sUXEdRORQcAjWI2suwE7kXfNuoTu0FIvBBLrHbfp7K1TZay+y8VYM8siKcamYomYGEPfut4FRjYR1+HGnteWRORu4EtjzIomYgjbNWsQ2xHhvG7GmB3GmOlYDarpWP3rEXPNupLukNTbdfZWK50DrMO6iTVCRNyh8quBZWGKqalYIilGgInAF6Gv6c7Q13rogLhE5L+ACmPMK6GiiLlmjcTWUNiuG4Axxo/VSvcSIdesq+ny3S+mnWdvtZSI/A2oAmKBhcYYb6j8F8ArIlIO5AP/7uDQagGMMYHGYjHGmDDFeGQ0hog8jXXdPMCqei3R+4DnRaSU0Iii9gpGRMYD9wOLROS5UPGDQNiv2Qliu58wXjcROQOYjTXKJh540xizJ8L+zroMnXyklFJdSHfoflFKqW5Dk7pSSnUhmtSVUqoL0aSulFJdiCZ1pZTqQjSpK6VUF6JJXUUUEXmjwfEfRSSt3vF5InLS8dQN62lhDGNE5NFTfb5S4dTlJx+pyCQibxhjrmvkV84GxwM4dpq4PfSoq+dXQN2GxYuMMb9pWI+ITMRaxrchvzHmwgZxCdaEHY+IJNVb8EqpTkGTugqXhsm7Tkxo8ae9WLMPJwHnikgMcC/W6n4vAojItwBfXWIWkTkicoYxZm39Co0xnwLnN3whEXm5wXEP4DngDeBz4AURecYYs+RU36RSHU27X1TYiYhDRAaEEncicDbWtPY5wAysae6rjDHnA3c1fHq9nx0Njk/0mtFYG0PUHU8G/g78xhgzP7R8ww3AWBGZcyrvS6lw0Ja6CpcDIvJ56OcqYDvwBNZONy+LyIvAMmPMGyKyFvibiMysX4Ex5mMRmSwin2B1yfzbGPOf+ueE1g+f3sjrxwJJIrIUuANrI4nFDeqvAn7dyvepVIfStV9URBGRocaYzSKSbozZX6/cHlpsLBPoY4xZWe93Yhr8IYvIwrp1xBuUPwa8Zoz5ql5ZX6wdsU7kPWPM/zu1d6VUx9GWugqL0B6kO4A99YptwE7gB3UJXURuBr4LBEXEgdXX/dMG1b0BXNug7JPmxmKM2Ue9PvdQn/6PjDH3NLcOpSKFJnUVLk6sfvIb6heKyMJ6Pw8GLgIuMMYEQ2V3AD8Anq/3tOP+jo0x2g+uuiVN6ipc/MDZoT7tOjaO3fW+BEgBBonILqAnMApY0KAue4N6AAww1RhT1KA8GHqcSHPOUSoiaZ+6imihDRZuBfpjjVd/zRjzbnijUipyaVJXSqkuRMepK6VUF6JJXSmluhBN6kop1YVoUldKqS5Ek7pSSnUh/wcZXdD9in0uEAAAAABJRU5ErkJggg==\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "prmLaRCq9xHj"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}